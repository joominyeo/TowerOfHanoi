//
// cyclicHanoi.s
//
// Cyclic Tower of Hanoi game
//
// return the number of steps in x2, x16 and x17 as placeholder registers

        eor     x2, x2, x2
        eor 	x11, x11, x11 //placeholder for switching A,B,C
        eor 	x12, x12, x12
        addi 	x12, x12, #1  //regulates if next move is from A - always starts moving from A
        eor 	x13, x13, x13 //regulates if next move is from B
        eor 	x14, x14, x14 //regulates if next move is from C
        eor 	x16, x16, x16
        eor 	x17, x17, x17

// x19, x20, x21 are stack pointers for stacks A, B, C
// stacks A, B, C grow upwards

        addi    x19, xzr, #0        // x19 = 0x0000
        addi    x20, xzr, #0x80     // x20 = 0x0080
        addi    x21, xzr, #0x100    // x21 = 0x0100

// place a very large disk of size 255 at the bottom of each stack

        addi    x15, xzr, #0xff     // size of very large disk
        stur    x15, [x19, #0]
        stur    x15, [x20, #0]
        stur    x15, [x21, #0]

// place disks n..1 on stack A

        addi    x4, xzr, #10        // n = 10
        add     x15, xzr, x4
loop:   addi    x19, x19, #8
        stur    x15, [x19, #0]
        subi    x15, x15, #1
        cbnz    x15, loop

        bl      chanoi
        stop

chanoi:		add 	x15, xzr, x4
		bl	movecw
		stop

movecw:		subi 	sp, sp, #64	//allocates stack and saves important values
		stur 	fp, [sp, #0]
		addi 	fp, sp, #56
		stur 	lr, [fp, #-48]
		stur 	x15, [fp, #0]
		stur 	x12, [fp, #-8]
		stur 	x13, [fp, #-16]
		stur 	x14, [fp, #-24]
		
		subi 	x15, x15, #1	//if n=1, branch to moving one value
		cbz	x15, decide

		bl 		moveccw`//if n>1, continue with move_cw

		addi 	x15, xzr, #1
		bl 		movecw

		ldur 	x15, [fp, #0]
		subi 	x15, x15, #1
		add 	x11, x12, xzr	//tell the next call of moveccw to move from c not a
		add 	x12, x13, xzr
		add 	x13, x14, xzr
		add 	x14, x11, xzr
		bl 		moveccw
		b 		donecw
		

decide:		cbnz 	x12, moveAB 	//branch to moving a value base on x12, x13, x14
		cbnz 	x13, moveBC
		cbnz 	x14, moveCA

moveAB:		ldur 	x16, [x19, #0] 	//move item from stack a to stack b
		ldur 	x17, [x20, #0]
		sub 	x31, x16, x17	//error checking
		b.hi 	error
		addi 	x20, x20, #8
		stur 	x16, [x20, #0]
		stur	x31, [x19, #0]
		subi	x19, x19, #8
		addi 	x2, x2, #1
		b 		donecw
		
moveBC:		ldur 	x16, [x20, #0]	//move item from stack b to stack c
		ldur 	x17, [x21, #0]
		sub 	x31, x16, x17
		b.hi 	error
		addi 	x21, x21, #8
		stur 	x16, [x21, #0]
		stur	x31, [x20, #0]
		subi	x20, x20, #8
		addi 	x2, x2, #1
		b 		donecw

moveCA:		ldur 	x16, [x21, #0] 	//move item from stack c to stack a
		ldur 	x17, [x19, #0]
		sub 	x31, x16, x17
		b.hi 	error
		addi 	x19, x19, #8
		stur 	x16, [x19, #0]
		stur	x31, [x21, #0]
		subi	x21, x21, #8
		addi 	x2, x2, #1
		b 		donecw

donecw:		ldur 	lr, [fp, #-48]	//reinstate old values and pop stack
		ldur 	x12 [fp, #-8]
		ldur 	x13 [fp, #-16]
		ldur 	x14 [fp, #-24]
		ldur 	fp, [fp, #-56]
		addi 	sp, sp, #64
		br 		lr



moveccw:	subi 	sp, sp, #64	//allocate stack for move_ccw
		stur 	fp, [sp, #0]
		addi 	fp, sp, #56
		stur 	lr, [fp, #-48]
		stur 	x15, [fp, #0]
		stur 	x12, [fp, #-8]
		stur 	x13, [fp, #-16]
		stur 	x14, [fp, #-24]

		subi	x15, x15, #1	//if n=1, just move_cw twice
		cbz	x15, twocw

		bl 		moveccw 	//if n>1, continue with n=1

		addi 	x15, xzr, #1
		bl 		movecw

		add 	x11, x12, xzr		//moving around x12,x13,x14 to show a different starting stack
		add 	x12, x13, xzr
		add 	x13, x14, xzr
		add 	x14, x11, xzr
		ldur 	x15, [fp, #0]
		subi 	x15, x15, #1
		bl 		movecw

		add 	x11, x12, xzr
		add 	x12, x13, xzr
		add 	x13, x14, xzr
		add 	x14, x11, xzr
		addi 	x15, xzr, #1
		bl 		movecw

		add 	x11, x12, xzr
		add 	x12, x13, xzr
		add 	x13, x14, xzr
		add 	x14, x11, xzr
		ldur 	x15, [fp, #0]
		subi 	x15, x15, #1
		bl 		moveccw
		b 		donecw		//donecw and doneccw were identical so i just went with donecw

twocw:		addi	x15, x15, #1		//a double clockwise move for a single counterclockwise
		bl 		movecw
		
		add 	x11, x12, xzr
		add 	x12, x14, xzr
		add 	x14, x13, xzr
		add 	x13, x11, xzr
		addi	x15, x15, #1
		bl 		movecw
		b 		donecw		


error:  subi    x2, xzr, #1         // return -1 if error
        br      lr
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Extra credit here
/*
For n = 1
	cw: 1		ccw: 2
For n = 2
	cw: 5		ccw: 7
For n = 3
	cw: 15		ccw: 21
For n = 4
	cw: 43		ccw: 59
For n = 5
	cw: 119		ccw: 163
For n = 6
	cw: 327		ccw: 447
For n = 7
	cw: 895		ccw: 1223
For n = 8
	cw: 2447	ccw: 3343
For n = 9
	cw: 6687	ccw: 9135
For n = 10
	cw: 18271	ccw: 24959
For n = 11
	cw: 49919	ccw: 68191
For n = 12
	cw: 136383	ccw: 186303
For n = 13
	cw: 372607	ccw: 508991
For n = 14
	cw: 1017983	ccw: 1390591
For n = 15
	cw: 2781183	ccw: 3799167
For n = 16
	cw: 7598335	ccw: 10379519
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Code to generate the above table
/*
#include <iostream>
#include <cstdio>
#include <sstream>
#include <string>
using namespace std;

int fec; // function enter count: keeps track of how many times any function has been called (excluding the main fnc)
int cwcounter = 0;
int ccwcounter = 0;
int cwval;
int ccwval;

int cw(int n);
int ccw(int n);
void initialise();

int main() {
	fec = 0;
	string s;
	cout << "Enter n: ";
	getline(cin, s);
	int n;
	stringstream(s) >> n;
	for (int x = 1; x <= n; x++)
	{
		initialise();
		cwval = cw(x);
		ccwval = ccw(x);
		cout << "For n = " << x << "\n";
		//cout << "\tcw steps: " << cwcounter << "\tccw steps: " << ccwcounter << "\n";
		if (x < 8) //for output formatting purposes
			cout << "\tcw: " << cwval << "\t\tccw: " << ccwval << "\n";
		else
			cout << "\tcw: " << cwval << "\tccw: " << ccwval << "\n";
	}
	return 0;
}

void initialise() {
	cwcounter = 0;
	ccwcounter = 0;
	cwval = 0;
	ccwval = 0;
}

int cw(int n) {
	//fec++; cout << fec << "\n";
	cwcounter++;
	if (n == 1)
		return 1;
	return 2 * ccw(n-1) + 1;
}

int ccw(int n) {
	//fec++; cout << fec << "\n";
	ccwcounter++;
	if (n == 1)
		return 2;
	return 2 * ccw(n-1) + cw(n-1) + 2;
}
*/
